Jan 25, 2020
The best YouTube series I ever watched from beginning to the ending. Thank you Corey you are Awesome.
Hossana and Area Colorado Community

Objective
The objective of this project is to learn how the sms/notification works by connecting with phone and to give the mm the real time Update on the current issue.


what it is gonna do do?

Update the mm by sending monthly notice to make a payment alert
if someone has not paid already in the way the user preferred to get
the notification email/sms
New mm can add themselves o the group


Design and Approach

Tech
pick a programming language
FEpl
BEpl
Databases
Integrate calendar

Seleunium?

 python -m django --version
 django-admin list of subcomand available to use
 check
  compilemessages
  createcachetable
  dbshell   diffsettings
  dumpdata      flush  inspectdb
  loaddata     makemessages
  makemigrations
  migrate     runserver  sendtestemail
  shell       showmigrations
  sqlflush     sqlmigrate
  sqlsequencereset  squashmigrations    startapp
  startproject        test    testserver

 django-admin startproject hnacsite creates the app
 python manage.py runserver
      http://127.0.0.1:8000/
      http://127.0.0.1:8000/admin/login/?next=/admin/

python manage.py startapp blog to add new sites

python manage.py makemigrations

python manage.py migrate creates migrations

python manage.py createsuperuser
Username (leave blank to use 'abiken'): abinetdj
Email address: abikg71@gmail.com
New User
testusrdj
Welcomenewusr
testprofile n pw testprofile1

 Database and Migrations
 OMR
 Go to  blog/models.py
 create classes

  run python manage.py makemigrations
  will creates blog/migrations/__init__.py

  python manage.py sqlmigrate blog 0001 creates sql code

  python manage.py migrate
  python manage.py shell

from blog.models import Post
from django.contrib.auth.models import User #

User.objects.all() displays <QuerySet [<User: abinetdj>, <User: testusrdj>]>

User.objects.first()
User.objects.last()
User.objects.filter(username='abinetdj')
User.objects.filter(username='abinetdj').first()
user = User.objects.filter(username='abinetdj').first()
user = User.objects.filter(username='testtest').first()
>>> user
user.profile.image.width
user.profile.image.url
<User: abinetdj>
>>> user.id
1
>>> user.pk
1
user = User.objects.get(id=1)

Post.objects.all()

post_1 = Post(title = ' Blog 1', content = 'First post content', author=user)


post_1.save()
create  in models.py
def __str__(self):
      return self.title

exit the shell run pyhon manage.py shell redo
post_2 = Post(title= ' Blog 2', content = 'Second post content', author_id =user.id)
post_2.save()

post = Post.objects.first()
>>> post.content
'First post content'
>>> post.author
<User: abinetdj>
>>> post.date_posted
datetime.datetime(2020, 2, 6, 15, 7, 34, 949614, tzinfo=<UTC>)
>>> post.title
' Blog 1'

post.author.email
'abikg71@gmail.com

user.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x1108d6f50>
>>> user.post_set.all()
<QuerySet [<Post:  Blog 1>, <Post:  Blog 2>]>

user.post_set.create(title= ' Blog 3', content = 'Third post content')

# The make sure to redo ...
>>> User.objects.all()
<QuerySet [<User: abinetdj>, <User: testusrdj>]>
>>> user = User.objects.filter(username='abinetdj').first()
>>> user
<User: abinetdj>
>>> post.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'post' is not defined
>>> user
<User: abinetdj>
>>> user.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x10db84050>
>>> user.post_set.all()
<QuerySet [<Post:  Blog 1>, <Post:  Blog 2>, <Post:  Blog 3>]>



TO See the post in admin page go to blog/admin.py and register the  the admin.site.register(post)

User Registration wout admin access

 hnacsite git:(master) âœ— python manage.py startapp users
 creates users app
 users.apps.BlogConfig', settings.py
 then in users/views.py create a function

 Create New user with
 newuserad
 NewUser1@company.com
 NewUser1

 newuserpp
nupp@company.com
Newuser123
 in Base.html add if msg....

crispy form for django from 3rd party
  pip install django-crispy-forms

Login and Logout System

Profile
# run migration
#python manage.py makemigrations
# make sure pip pillow is installed

# python manage.py migrate
# Reginster in users/admin.py

To access those pictures go to python shell
http://127.0.0.1:8000/admin/users/profile/

/hnacsite/users/signals.py and then in
/hnacsite/users/signals.py and then in
/hnacsite/users/signals.py and  in users/admin.py
add a ready fun

#032620
To add image on blog sides
.. /hnacsite/blog/templates/blog/home.html
  <img src={{"post.author.profile.image.url"}} alt="">

  Part 10 - Create, Update, and Delete Posts
  blog/views.py
  Create a new class
    PostListView,
    PostDetailView,
    PostCreateView,
    PostUpdateView,
    PostDeleteView,
    UserPostListView

..blog/templates/blog/post_confirm_delete.html and others

then in blog/urls.py modifiy the file

In order to put the lastest post at the top
views.py
ordering = ['-date_posted']

To make sure the PostListView is working go to http://127.0.0.1:8000/blog/post/1/


In order to link the indivisual posts to author and more go to
blog/templates/blog/home.html

h2><a class="article-title" href="{% url 'post-detail' post.id%}">{{ post.title }}</a></h2>

When you havor over the post it becomes link

To Create a new post
blog/templates/blog/post_form.html this is how it has to be writeen
http://127.0.0.1:8000/blog/post/new/

Then blog/models.py

http://127.0.0.1:8000/login/?next=/blog/post/new/ 
